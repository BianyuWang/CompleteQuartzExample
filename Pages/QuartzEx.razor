@page "/quartzExample"
@using Microsoft.AspNetCore.SignalR.Client
@using CompleteQuartzExample.Data.Services
@using System.Timers
@using System.Linq
@using CompleteQuartzExample.Data.Models
@inject AnimalService AnimalService

@inject NavigationManager _NavigationManager
@inject PoemService  _poemService





<div class="poem">
    <div class="row">
        <div id="Title"> <h3>The Strongest Girl I Ever Knew</h3></div>
        <div class="jobBTN">
            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="pause" Size="ButtonSize.Small" Class="m-1" Disabled="@disableP"  Click="(arg)=>pauseDefault(true)" />
                  </div>
        <div class="jobBTN">
            <RadzenButton  ButtonStyle="ButtonStyle.Primary" Icon="cached" Size="ButtonSize.Small" Disabled="disableR"  Class="m-1" Click="(arg)=>pauseDefault(false)"  />
        </div>
    </div>
    <div id="Source">
        <h6>
            <small>
                Source: <a href="https://www.familyfriendpoems.com/poem/the-strongest-girl-i-ever-knew"
                           class="alert-link">https://www.familyfriendpoems.com/poem/the-strongest-girl-i-ever-knew</a>
            </small>
        </h6>
    </div>

    <div id="poemText">
        @if (poemLines.Count == 0)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            foreach (var line in poemLines)
            {
                <div> <h4> @line  </h4></div>
            }
        }
    </div>

    <div id="Info">
        @info
    </div>
    <div id="countdown" style=" display:@display;">
        Will repeat in <span style="color:red">@counter</span> seconds

    </div>
</div>

<hr />

<h3>Animal Sounds(working, but not fancy, to be continued)</h3>

<RadzenCard>
    <RadzenTemplateForm TItem="SingleJob" Data="@jobPara" Submit="@Submit">
        <div class="row align-items-baseline">

            <div class="col-md-3">
                Select an animal you like
                <RadzenDropDown @bind-Value="AnimalName" AllowClear="true" TValue="string" Class="w-100"
                                Data=@(AnimalService.Animals.Select(c => c.Name).Distinct())
                                Change="@onAnimalChange" />
            </div>


            <div class="col-md-2">
                Interval(second)
                <RadzenNumeric @bind-Value="jobPara.interval" Name="Interval" TValue="int" Min="1" Max="10" Class="w-100" />
                <RadzenNumericRangeValidator Component="Interval" Min="1" Max="10" Text="Interval should be between 1 and 10" Popup=true Style="position: absolute" />
                <RadzenRequiredValidator Component="Interval" Text="Interval number is required" Style="position: relative" />

            </div>

            <div class="col-md-2">
                Repeat
                <RadzenNumeric @bind-Value="jobPara.repeat" Name="Repeat" />
                <RadzenNumericRangeValidator Component="Repeat" Min="1" Max="10" Text="Repeat should be between 1 and 10" Popup=false Style="position: absolute" />
                <RadzenRequiredValidator Component="Repeat" Text="Repeat number is required" Style="position: relative" />

            </div>
            <div class="col-md-3">
                Styles
                <RadzenDropDown AllowClear="true" TValue="string" Class="w-100"
                                Data=@progressBarStyles.Select(p=>p.ToString())
                                Change="@onStyleChange" />
            </div>



            <div class="col-md-2">

                <RadzenButton ButtonType="ButtonType.Submit" Text="Try" ButtonStyle="ButtonStyle.Secondary" />
            </div>



        </div>



    </RadzenTemplateForm>

</RadzenCard>
@if (mulJobProgress.Count > 0)
{
    @foreach (var m in mulJobProgress)
    {if (m.current > m.total)
            m.current = m.total;
        var result = ((double)m.current / (double)m.total) * 100.0;
        <div class="row w-100">

            <div class="col-md-1">
                progress:
            </div>
            <div class="col-md-5" style="margin-top:15px;">
                <RadzenProgressBar ProgressBarStyle="m.style" @bind-Value="@result" />
            </div>
            <div>
                @m.animal.Name, 
                @for (int i = 0; i < m.current; i++)
                {<span>@m.animal.Sound, </span>

                    if (i ==m.total-1)
                    { 
            <span> last interation, will stop</span>
                    }
                }
            </div>
        </div>
    }}
<style>
    .poem {
        font-family: 'Satisfy', cursive;
    }

    .jobBTN {
      font-family:'Times New Roman';
      margin-left: 20px;
    }
</style>

@code {
    List<MulJobProgress> mulJobProgress = new List<MulJobProgress>();

    bool disableR = true;
    bool disableP = false;

    string info;
    string display = "none";
    string AnimalName = AnimalService.Animals.FirstOrDefault().Name;
    List<string>
        poemLines = new List<string>
            ();
    private HubConnection hubconnection;
    List<ProgressBarStyle> progressBarStyles;
    List<Animal>
        animals = AnimalService.Animals;
    SingleJob jobPara = new SingleJob();

    private static Timer aTimer;
    private int counter = 9;
    public void StartTimer()
    {
        aTimer = new System.Timers.Timer(1000);
        aTimer.Elapsed += CountDownTimer;
        aTimer.Enabled = true;
    }


    void pauseDefault(bool pause)
    {
       disableR = disableP ? true : false;
        disableP = pause;
        AnimalService.PauseJob(pause);
        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
       disableR = disableP ? false : true;
        progressBarStyles =   Enum.GetValues(typeof(ProgressBarStyle)).Cast<ProgressBarStyle>().ToList();
        hubconnection = new HubConnectionBuilder()
        .WithUrl(_NavigationManager.ToAbsoluteUri("/UpdateHub"))
        .Build();

        poemLines = _poemService.GetPoemLineList();

        jobPara.animal = animals.FirstOrDefault();

        hubconnection.On<string, string, int, int, string, string,string>
            ("updateMultiTrigger", (msg, key, current, total, animalName, sound,styleStr) =>
            {
                var job = mulJobProgress.Where(j => j.key.Equals(key)).FirstOrDefault();

                if (job == null)
                {
                    job = new MulJobProgress();
                    job.current = current;
                    job.key = key;
                    job.animal.Name = animalName;
                    job.animal.Sound = sound;
                    job.color = "red";
                    job.total = total;
                    job.current = current;
                    job.style = (ProgressBarStyle)Enum.Parse(typeof(ProgressBarStyle), styleStr);
                    mulJobProgress.Add(job);
                }
                job.current = current;
                //  SingleJobMsg.Add(msg);
                StateHasChanged();
            });


        hubconnection.On<string>
            ("updatePoemList", (msg) =>
            {

                poemLines = _poemService.GetPoemLineList();
                if (poemLines.Count != 8)
                {
                    info = "To be continued";
                    if (poemLines.Count == 1)
                    {
                        display = "none";
                    }
                }
                else
                {
                    info = "The End!";
                    counter = 9;
                    StartTimer();
                    display = "block";
                }
                StateHasChanged();
            });


        await hubconnection.StartAsync();



    }
    public async Task Submit(SingleJob a)
    {

        await AnimalService.AddJob(a);

    }

    public void onStyleChange(object value)
    {
        //   AnimalName = value.ToString();

        jobPara.barStyle = (ProgressBarStyle)Enum.Parse(typeof(ProgressBarStyle), value.ToString());
    }
    public void onAnimalChange(object value)
    {
        //   AnimalName = value.ToString();
        var selection = AnimalService.Animals.Where(a => a.Name.Equals(value.ToString())).FirstOrDefault();
        if (selection != null)
            jobPara.animal = selection;
    }

    public void CountDownTimer(Object source, ElapsedEventArgs e)
    {
        if (counter > 0)
        {
            counter -= 1;
        }
        else
        {
            aTimer.Enabled = false;
        }
        InvokeAsync(StateHasChanged);
    }



                            }
